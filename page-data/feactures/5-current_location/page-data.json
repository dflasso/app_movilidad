{
    "componentChunkName": "component---src-templates-docs-js",
    "path": "/feactures/5-current_location",
    "result": {"data":{"site":{"siteMetadata":{"title":"App Movilidad - ESPE | Dany Lasso","docsLocation":"https://github.com/dflasso/app_movilidad"}},"mdx":{"fields":{"id":"34dd0c64-2acb-5585-8949-9e50c911d21a","title":"Current Location","slug":"/feactures/5-current_location"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Current Location\",\n  \"metaTitle\": \"This is screen show map with current location\",\n  \"metaDescription\": \"google-apis, google-maps\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Description\"), mdx(\"p\", null, \"This feature basically show the current location of user.\"), mdx(\"h1\", null, \"Screen\"), mdx(\"p\", null, \"The screen only call \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MapViewCurrentLocation\"), \" Widget\"), mdx(\"p\", null, \"See all code of screen in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/dflasso/app_movilidad/blob/3-maps-routes/lib/src/screens/current_location.dart\"\n  }, \"github\"), \".\"), mdx(\"h1\", null, \"Custom Widgets\"), mdx(\"h3\", null, \"MapViewCurrentLocation\"), mdx(\"p\", null, \"Steps for show current location with google maps:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Get Current Location\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-dart\"\n  }, \"Future<void> _getCurrentLocation() async {\\n    bool serviceEnabled;\\n    LocationPermission permission;\\n\\n    // Test if location services are enabled.\\n    serviceEnabled = await Geolocator.isLocationServiceEnabled();\\n    if (!serviceEnabled) {\\n      // Location services are not enabled don't continue\\n      // accessing the position and request users of the\\n      // App to enable the location services.\\n      return Future.error('Location services are disabled.');\\n    }\\n\\n    permission = await Geolocator.checkPermission();\\n    if (permission == LocationPermission.denied) {\\n      permission = await Geolocator.requestPermission();\\n      if (permission == LocationPermission.denied) {\\n        // Permissions are denied, next time you could try\\n        // requesting permissions again (this is also where\\n        // Android's shouldShowRequestPermissionRationale\\n        // returned true. According to Android guidelines\\n        // your App should show an explanatory UI now.\\n        return Future.error('Location permissions are denied.');\\n      }\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Add Market of Current Location\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-dart\"\n  }, \"void _addMarket() {\\n    double startLatitude = _currentPosition!.latitude;\\n\\n    double startLongitude = _currentPosition!.longitude;\\n\\n    String startCoordinatesString = '($startLatitude, $startLongitude)';\\n\\n    // Start Location Marker\\n    Marker startMarker = Marker(\\n      markerId: MarkerId(startCoordinatesString),\\n      position: LatLng(startLatitude, startLongitude),\\n      infoWindow: InfoWindow(\\n        title: 'Start $startCoordinatesString',\\n        snippet: \\\"test\\\",\\n      ),\\n      icon: BitmapDescriptor.defaultMarker,\\n    );\\n\\n    setState(() {\\n      markers.add(startMarker);\\n    });\\n    // Adding the markers to the list\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Show Map\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-dart\"\n  }, \"@override\\nWidget build(BuildContext context) {\\n    return Stack(\\n      children: <Widget>[\\n        GoogleMap(\\n          markers: Set<Marker>.from(markers),\\n          initialCameraPosition: _initialLocation,\\n          myLocationEnabled: true,\\n          myLocationButtonEnabled: false,\\n          zoomControlsEnabled: false,\\n          zoomGesturesEnabled: true,\\n          mapType: MapType.normal,\\n          onMapCreated: (GoogleMapController controller) {\\n            mapController = controller;\\n          },\\n        )\\n      ],\\n    );\\n}\\n\")), mdx(\"h1\", null, \"Pluggins\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://pub.dev/packages/google_maps_flutter\"\n  }, \"google_maps_flutter\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://pub.dev/packages/geolocator\"\n  }, \"geolocator\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#description","title":"Description"},{"url":"#screen","title":"Screen"},{"url":"#custom-widgets","title":"Custom Widgets","items":[{"items":[{"url":"#mapviewcurrentlocation","title":"MapViewCurrentLocation"}]}]},{"url":"#pluggins","title":"Pluggins"}]},"parent":{"relativePath":"feactures/5-current_location.md"},"frontmatter":{"metaTitle":"This is screen show map with current location","metaDescription":"google-apis, google-maps"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Landing Page"}}},{"node":{"fields":{"slug":"/About","title":"About"}}},{"node":{"fields":{"slug":"/feactures","title":"Feactures App"}}},{"node":{"fields":{"slug":"/feactures/1-selection_destiny","title":"Selection Destiny"}}},{"node":{"fields":{"slug":"/feactures/2-map_view","title":"Map View"}}},{"node":{"fields":{"slug":"/feactures/3-summary_trip","title":"Summary Trip"}}},{"node":{"fields":{"slug":"/feactures/4-report_trips","title":"Report Trips"}}},{"node":{"fields":{"slug":"/feactures/5-current_location","title":"Current Location"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}}]}},"pageContext":{"id":"34dd0c64-2acb-5585-8949-9e50c911d21a"}},
    "staticQueryHashes": ["2619113677","3706406642","417421954"]}